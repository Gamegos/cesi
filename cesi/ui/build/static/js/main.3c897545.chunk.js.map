{"version":3,"sources":["services/api/index.js","scenes/dashboard/components/ActivityLogs.jsx","scenes/dashboard/components/ActivityLogList.jsx","util/index.js","scenes/dashboard/components/DashboardSummary.jsx","scenes/dashboard/DashboardPage.jsx","common/helpers/Processes.jsx","scenes/environments/components/FilterOfEnvironments.jsx","scenes/environments/EnvironmentsPage.jsx","scenes/nodes/components/FilterOfNodes.jsx","scenes/nodes/NodesPage.jsx","scenes/groups/components/FilterOfGroups.jsx","scenes/groups/GroupsPage.jsx","common/helpers/FormMessage.jsx","scenes/users/components/AddNewUserModal.jsx","scenes/users/UsersPage.jsx","scenes/error/ErrorPage.jsx","scenes/login/LoginPage.jsx","scenes/about/AboutPage.jsx","scenes/profile/change_password/ChangePasswordPage.jsx","common/views/Header.jsx","App.jsx","registerServiceWorker.js","index.js"],"names":["API_PREFIX","process","getRequest","url","axios","get","then","res","data","catch","error","response","postRequest","post","deleteRequest","delete","activitylogs","a","logs","console","log","clear","auth","logIn","username","password","logOut","profile","user","changePassword","oldPassword","newPassword","put","nodes","result","getNode","nodeName","allProcesses","start","stop","restart","processes","processUniqueName","users","add","usertype","remove","environments","Promise","all","map","environment","name","members","member","general","node","groups","version","ActivityLogs","refreshLogs","clearLogs","Fragment","Row","Col","sm","Button","outline","color","onClick","ActivityLogList","ListGroup","ListGroupItem","key","getConnectedAndNotConnectedNode","connectedNodes","notConnectedNodes","connected","push","DashboardSummary","running","stopped","statename","environmentNodes","reduce","env","concat","amountOfProcessesForEnvironment","total","length","className","Card","body","CardTitle","Badge","CardText","DashboardPage","Component","componentDidMount","this","props","refreshActivityLogs","refreshDashboardSummary","render","clearActivityLogs","Container","ProcessLog","React","state","modal","toggle","setState","showLogs","group","api","Modal","isOpen","ModalHeader","ModalBody","stdout","stderr","Process","refresh","handleProcess","action","rowClass","class","pid","uptime","Processes","handleAllProcess","filterFunc","Table","hover","filter","defaultProps","FilterOfEnvironments","checks","onInputChange","extendedEnvironments","CustomInput","type","id","label","onChange","checked","indexOf","inline","EnvironmentsPage","handleInputChange","event","target","value","prevState","element","componentWillMount","refreshEnvironments","fluid","size","environmentName","FilterOfNodes","disabled","NodesPage","refreshNodes","FilterOfGroups","GroupsPage","refreshGroups","includes","FormMessage","message","status","UncontrolledAlert","AddNewUserModal","confirmPassword","formMessage","formStatus","submitForm","e","preventDefault","json","setTimeout","refreshUsers","Form","onSubmit","FormGroup","Label","Input","placeholder","for","UsersPage","UserTypes","removeUser","u","index","scope","ErrorPage","LoginPage","constructor","super","handleChange","onLogIn","block","AboutPage","href","ChangePassword","handleChangePassword","history","withRouter","HeaderSettings","NavbarToggler","Collapse","navbar","Nav","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","tag","NavLink","to","RRNavLink","divider","onLogOut","Header","isAdmin","Navbar","light","expand","NavbarBrand","exact","pills","NavItem","replace","App","handleRefreshActivityLogs","handleClearActivityLogs","handleRefreshGroups","handleRefreshNodes","handleRefreshEnvironments","handleRefreshDashboardSummary","handleRefreshUsers","handleRemoveUser","handleRefreshProfile","handleLogIn","resolve","reject","handleLogOut","getApiVersion","from","path","component","ChangePasswordPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3c897545.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_PREFIX = process.env.PUBLIC_URL + \"/api/v2\";\n\nconst getRequest = url => {\n  return axios\n    .get(url)\n    .then(res => res.data)\n    .catch(error => {\n      throw error.response.data;\n    });\n};\n\nconst postRequest = (url, data) => {\n  return axios\n    .post(url, data)\n    .then(res => res.data)\n    .catch(error => {\n      throw error.response.data;\n    });\n};\n\nconst putRequest = (url, data) => {\n  return axios\n    .put(url, data)\n    .then(res => res.data)\n    .catch(error => {\n      throw error.response.data;\n    });\n};\n\nconst deleteRequest = url => {\n  return axios\n    .delete(url)\n    .then(res => res.data)\n    .catch(error => {\n      throw error.response.data;\n    });\n};\n\nconst activitylogs = {\n  get: async () => {\n    try {\n      const response = await getRequest(`${API_PREFIX}/activitylogs/20/`);\n      return response.logs;\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  },\n  clear: () => deleteRequest(`${API_PREFIX}/activitylogs/`)\n};\n\nconst auth = {\n  logIn: (username, password) => {\n    return postRequest(`${API_PREFIX}/auth/login/`, { username, password });\n  },\n  logOut: () => {\n    return postRequest(`${API_PREFIX}/auth/logout/`);\n  }\n};\n\nconst profile = {\n  get: async () => {\n    try {\n      const response = await getRequest(`${API_PREFIX}/profile/`);\n      return response.user;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  },\n  changePassword: (oldPassword, newPassword) => {\n    return putRequest(`${API_PREFIX}/profile/password/`, {\n      oldPassword,\n      newPassword\n    });\n  }\n};\n\nconst nodes = {\n  get: async () => {\n    try {\n      const result = await getRequest(`${API_PREFIX}/nodes/`);\n      return result.nodes;\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  },\n  getNode: nodeName => {\n    return getRequest(`${API_PREFIX}/nodes/${nodeName}/`);\n  },\n  allProcesses: {\n    start: nodeName => {\n      return getRequest(`${API_PREFIX}/nodes/${nodeName}/all-processes/start/`);\n    },\n    stop: nodeName => {\n      return getRequest(`${API_PREFIX}/nodes/${nodeName}/all-processes/stop/`);\n    },\n    restart: nodeName => {\n      return getRequest(\n        `${API_PREFIX}/nodes/${nodeName}/all-processes/restart/`\n      );\n    }\n  }\n};\n\nconst processes = {\n  get: nodeName => {\n    return getRequest(`${API_PREFIX}/nodes/${nodeName}/processes/`);\n  },\n  process: {\n    get: (nodeName, processUniqueName) => {\n      return getRequest(\n        `${API_PREFIX}/nodes/${nodeName}/processes/${processUniqueName}/`\n      );\n    },\n    start: (nodeName, processUniqueName) => {\n      return getRequest(\n        `${API_PREFIX}/nodes/${nodeName}/processes/${processUniqueName}/start/`\n      );\n    },\n    stop: (nodeName, processUniqueName) => {\n      return getRequest(\n        `${API_PREFIX}/nodes/${nodeName}/processes/${processUniqueName}/stop/`\n      );\n    },\n    restart: (nodeName, processUniqueName) => {\n      return getRequest(\n        `${API_PREFIX}/nodes/${nodeName}/processes/${processUniqueName}/restart/`\n      );\n    },\n    log: (nodeName, processUniqueName) => {\n      return getRequest(\n        `${API_PREFIX}/nodes/${nodeName}/processes/${processUniqueName}/log/`\n      );\n    }\n  }\n};\n\nconst users = {\n  get: async () => {\n    try {\n      const result = await getRequest(`${API_PREFIX}/users/`);\n      return result.users;\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  },\n  add: (username, password, usertype) => {\n    return postRequest(`${API_PREFIX}/users/`, {\n      username,\n      password,\n      usertype\n    });\n  },\n  remove: username => {\n    return deleteRequest(`${API_PREFIX}/users/${username}/`);\n  }\n};\n\nconst environments = {\n  get: async () => {\n    try {\n      const result = await getRequest(`${API_PREFIX}/environments/`);\n      console.log(\"GetEnvironments:\", result);\n      return Promise.all(\n        result.environments.map(async environment => {\n          const name = environment.name;\n          let members = await Promise.all(\n            environment.members.map(member =>\n              nodes.getNode(member.general.name)\n            )\n          );\n          members = members.map(member => member.node);\n          return { name, members };\n        })\n      );\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  }\n};\n\nconst groups = {\n  get: async () => {\n    try {\n      const result = await getRequest(`${API_PREFIX}/groups/`);\n      console.log(result);\n      return result.groups;\n    } catch (error) {\n      console.log(error);\n      return [];\n    }\n  }\n};\n\nconst version = {\n  get: async () => {\n    try {\n      const result = await getRequest(process.env.PUBLIC_URL + \"/api/version\");\n      console.log(result);\n      return result.version;\n    } catch (error) {\n      console.log(error);\n      return \"0\";\n    }\n  }\n};\n\nexport default {\n  activitylogs,\n  auth,\n  profile,\n  nodes,\n  processes,\n  users,\n  environments,\n  groups,\n  version\n};\n","import React from \"react\";\nimport { Row, Col, Button } from \"reactstrap\";\n\nimport { ActivityLogList } from \"scenes/dashboard/components\";\n\nconst ActivityLogs = ({ logs, refreshLogs, clearLogs }) => {\n  return (\n    <React.Fragment>\n      <br />\n      <Row>\n        <Col sm=\"10\">\n          <h2>Activity Logs</h2>\n        </Col>\n        <Col>\n          <Button outline color=\"info\" onClick={refreshLogs}>\n            Refresh\n          </Button>{\" \"}\n          <Button outline color=\"danger\" onClick={clearLogs}>\n            Clear\n          </Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ActivityLogList logs={logs} />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default ActivityLogs;\n","import React from \"react\";\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\n\nconst ActivityLogList = ({ logs }) => {\n  return (\n    <ListGroup>\n      {logs.map(log => (\n        <ListGroupItem key={log}>{log}</ListGroupItem>\n      ))}\n    </ListGroup>\n  );\n};\n\nexport default ActivityLogList;\n","const getConnectedAndNotConnectedNode = nodes => {\n  const connectedNodes = [];\n  const notConnectedNodes = [];\n  for (const node of nodes) {\n    if (node.general.connected === true) {\n      connectedNodes.push(node);\n    } else {\n      notConnectedNodes.push(node);\n    }\n  }\n\n  return { connectedNodes, notConnectedNodes };\n};\n\nexport default getConnectedAndNotConnectedNode;\n","import React from \"react\";\nimport { Row, Col, Badge, Card, CardTitle, CardText } from \"reactstrap\";\n\nimport getConnectedAndNotConnectedNode from \"util/index\";\n\nconst DashboardSummary = ({ environments, nodes }) => {\n  // Nodes and Processes Sections\n  const { connectedNodes, notConnectedNodes } = getConnectedAndNotConnectedNode(\n    nodes\n  );\n  const processes = {\n    running: [],\n    stopped: []\n  };\n  for (const node of connectedNodes) {\n    for (const process of node.processes) {\n      if (process.statename === \"STOPPED\") {\n        processes.stopped.push(process);\n      } else if (process.statename === \"RUNNING\") {\n        processes.running.push(process);\n      }\n    }\n  }\n\n  // Environments Section\n  const environmentNodes = environments.reduce(\n    (nodes, env) => nodes.concat(...env.members),\n    []\n  );\n\n  const amountOfProcessesForEnvironment = environmentNodes.reduce(\n    (total, node) => total + node.processes.length,\n    0\n  );\n\n  return (\n    <Row className=\"justify-content-md-center\">\n      <Col>\n        <Card body>\n          <CardTitle>\n            Environments <Badge color=\"secondary\">{environments.length}</Badge>\n          </CardTitle>\n          <CardText>\n            {environmentNodes.length} Nodes | {amountOfProcessesForEnvironment}{\" \"}\n            Processes\n          </CardText>\n        </Card>\n      </Col>\n      <Col>\n        <Card body>\n          <CardTitle>\n            Nodes <Badge color=\"secondary\">{nodes.length}</Badge>\n          </CardTitle>\n          <CardText>\n            {connectedNodes.length} Connected | {notConnectedNodes.length}{\" \"}\n            Not-Connected\n          </CardText>\n        </Card>\n      </Col>\n      <Col>\n        <Card body>\n          <CardTitle>\n            Processes{\" \"}\n            <Badge color=\"secondary\">\n              {processes.running.length + processes.stopped.length}\n            </Badge>\n          </CardTitle>\n          <CardText>\n            {processes.running.length} Running | {processes.stopped.length}{\" \"}\n            Stopped\n          </CardText>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default DashboardSummary;\n","import React, { Component } from \"react\";\nimport { Container } from \"reactstrap\";\n\nimport { ActivityLogs, DashboardSummary } from \"scenes/dashboard/components\";\n\nclass DashboardPage extends Component {\n  componentDidMount() {\n    this.props.refreshActivityLogs();\n    this.props.refreshDashboardSummary();\n  }\n  render() {\n    const {\n      environments,\n      nodes,\n      logs,\n      refreshActivityLogs,\n      clearActivityLogs\n    } = this.props;\n    return (\n      <Container>\n        <DashboardSummary environments={environments} nodes={nodes} />\n        <ActivityLogs\n          logs={logs}\n          refreshLogs={refreshActivityLogs}\n          clearLogs={clearActivityLogs}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default DashboardPage;\n","import React from \"react\";\nimport {\n  Card,\n  CardTitle,\n  Badge,\n  Button,\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from \"reactstrap\";\nimport PropTypes from \"prop-types\";\n\nimport api from \"services/api\";\n\nclass ProcessLog extends React.Component {\n  state = {\n    modal: false,\n    logs: null\n  };\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  showLogs = () => {\n    const { node, process } = this.props;\n    const processUniqueName = `${process.group}:${process.name}`;\n    api.processes.process\n      .log(node.general.name, processUniqueName)\n      .then(data => {\n        console.log(data);\n        this.setState({\n          logs: data.logs\n        });\n        this.toggle();\n      });\n  };\n\n  render() {\n    const { node, process } = this.props;\n    return (\n      <React.Fragment>\n        <Button color=\"info\" onClick={this.showLogs}>\n          Log\n        </Button>{\" \"}\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>\n            Node: {node.general.name} | Process: {process.name}\n          </ModalHeader>\n          <ModalBody>\n            {this.state.logs && (\n              <React.Fragment>\n                <strong>Stdout</strong>\n                {this.state.logs.stdout.map(log => (\n                  <p key={log}>{log}</p>\n                ))}\n                <br />\n                <strong>Stderr</strong>\n                {this.state.logs.stderr.map(log => (\n                  <p key={log}>{log}</p>\n                ))}\n              </React.Fragment>\n            )}\n          </ModalBody>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Process = ({ node, process, refresh }) => {\n  const handleProcess = action => {\n    const nodeName = node.general.name;\n    const processUniqueName = `${process.group}:${process.name}`;\n    api.processes.process[action](nodeName, processUniqueName).then(data => {\n      console.log(data);\n      refresh();\n    });\n  };\n\n  let rowClass = '';\n\n  switch (process.statename) {\n    case 'STARTING':\n      rowClass = 'table-info';\n      break;\n    case 'RUNNING':\n      rowClass = 'table-success';\n      break;\n    case 'STOPPED':\n      rowClass = 'table-warning';\n      break;\n    case 'FATAL':\n      rowClass = 'table-danger';\n      break;\n    default:\n      rowClass = '';\n  }\n\n  return (\n    <React.Fragment>\n      <tr key={process.name} class={rowClass}>\n        <td>{process.name}</td>\n        <td>{process.group}</td>\n        <td>{process.pid}</td>\n        <td>{process.uptime}</td>\n        <td>{process.statename}</td>\n        <td>\n          <Button color=\"success\" onClick={() => handleProcess(\"start\")}>\n            Start\n          </Button>{\" \"}\n          <Button color=\"danger\" onClick={() => handleProcess(\"stop\")}>\n            Stop\n          </Button>{\" \"}\n          <Button color=\"warning\" onClick={() => handleProcess(\"restart\")}>\n            Restart\n          </Button>{\" \"}\n          <ProcessLog process={process} node={node} />\n        </td>\n      </tr>\n    </React.Fragment>\n  );\n};\n\nclass Processes extends React.Component {\n  static propTypes = {\n    node: PropTypes.object.isRequired,\n    filterFunc: PropTypes.func\n  };\n  static defaultProps = {\n    filterFunc: () => true\n  };\n\n  handleAllProcess = action => {\n    const nodeName = this.props.node.general.name;\n    api.nodes.allProcesses[action](nodeName).then(() => {\n      console.log(\"Updating nodes for single node action.\");\n      this.props.refresh();\n    });\n  };\n\n  render() {\n    const { node, filterFunc } = this.props;\n    return (\n      <React.Fragment>\n        <Card body>\n          <CardTitle>\n            Processes for {node.general.name}{\" \"}\n            <Badge color=\"secondary\">{node.processes.length}</Badge>{\" \"}\n            <Button\n              color=\"success\"\n              onClick={() => this.handleAllProcess(\"start\")}\n            >\n              Start All\n            </Button>{\" \"}\n            <Button\n              color=\"danger\"\n              onClick={() => this.handleAllProcess(\"stop\")}\n            >\n              Stop All\n            </Button>{\" \"}\n            <Button\n              color=\"warning\"\n              onClick={() => this.handleAllProcess(\"restart\")}\n            >\n              Restart All\n            </Button>{\" \"}\n          </CardTitle>\n          {node.processes.length !== 0 ? (\n            <Table hover>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Group</th>\n                  <th>Pid</th>\n                  <th>Uptime</th>\n                  <th>State</th>\n                  <th>Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {node.processes.filter(filterFunc).map(process => (\n                  <Process\n                    key={`${node.name}:${process.name}`}\n                    node={node}\n                    process={process}\n                    refresh={this.props.refresh}\n                  />\n                ))}\n              </tbody>\n            </Table>\n          ) : (\n            <p>No processes configured.</p>\n          )}\n        </Card>\n        <br />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Processes;\n","import React from \"react\";\nimport { Card, CardTitle, Badge, CustomInput } from \"reactstrap\";\n\nimport getConnectedAndNotConnectedNode from \"util/index\";\n\nconst FilterOfEnvironments = props => {\n  const { checks, environments, onInputChange } = props;\n  const extendedEnvironments = environments.map(environment => {\n    const {\n      connectedNodes,\n      notConnectedNodes\n    } = getConnectedAndNotConnectedNode(environment.members);\n    return { ...environment, connectedNodes, notConnectedNodes };\n  });\n  return (\n    <React.Fragment>\n      {extendedEnvironments.length > 0 &&\n        extendedEnvironments.map(environment => (\n          <Card body key={environment.name}>\n            <CardTitle>\n              <CustomInput\n                type=\"checkbox\"\n                name={environment.name}\n                id={environment.name}\n                label={environment.name}\n                onChange={onInputChange}\n                checked={checks.indexOf(environment.name) >= 0}\n                inline\n              />\n              <Badge color=\"secondary\">{environment.members.length}</Badge>\n            </CardTitle>\n\n            <Card body>\n              <CardTitle>\n                Connected{\" \"}\n                <Badge color=\"secondary\">\n                  {environment.connectedNodes.length}\n                </Badge>\n              </CardTitle>\n              {environment.connectedNodes.map(member => (\n                <p key={member.general.name}>{member.general.name}</p>\n              ))}\n            </Card>\n            <Card body>\n              <CardTitle>\n                Not-Connected{\" \"}\n                <Badge color=\"secondary\">\n                  {environment.notConnectedNodes.length}\n                </Badge>\n              </CardTitle>\n              {environment.notConnectedNodes.map(member => (\n                <p key={member.general.name}>{member.general.name}</p>\n              ))}\n            </Card>\n          </Card>\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default FilterOfEnvironments;\n","import React, { Component } from \"react\";\nimport { Card, CardTitle, Row, Col, Badge, Container } from \"reactstrap\";\n\nimport Processes from \"common/helpers/Processes\";\nimport FilterOfEnvironments from \"scenes/environments/components/FilterOfEnvironments\";\n\nclass EnvironmentsPage extends Component {\n  state = {\n    checks: []\n  };\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    if (value) {\n      this.setState(prevState => ({\n        checks: prevState.checks.concat([name])\n      }));\n    } else {\n      this.setState(prevState => ({\n        checks: prevState.checks.filter(element => element !== name)\n      }));\n    }\n  };\n\n  componentWillMount() {\n    this.props.refreshEnvironments();\n  }\n\n  render() {\n    const { checks } = this.state;\n    const { environments, refreshEnvironments } = this.props;\n    return (\n      <Container fluid>\n        <Row>\n          <Col sm={{ size: \"auto\" }}>\n            <Card body>\n              <CardTitle>\n                Environments{\" \"}\n                <Badge color=\"secondary\">{environments.length}</Badge>\n              </CardTitle>\n\n              <FilterOfEnvironments\n                environments={this.props.environments}\n                checks={this.state.checks}\n                onInputChange={this.handleInputChange}\n              />\n            </Card>\n          </Col>\n          <Col>\n            {checks.map(environmentName =>\n              environments\n                .filter(environment => environment.name === environmentName)\n                .map(environment => (\n                  <div key={environment.name}>\n                    <h1>\n                      Environment:\n                      <Badge color=\"info\">{environment.name}</Badge>\n                    </h1>\n                    {environment.members.map(member => (\n                      <Processes\n                        key={member.general.name}\n                        node={member}\n                        refresh={refreshEnvironments}\n                      />\n                    ))}\n                  </div>\n                ))\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default EnvironmentsPage;\n","import React from \"react\";\nimport { Card, CardTitle, Badge, CustomInput } from \"reactstrap\";\n\nimport getConnectedAndNotConnectedNode from \"util/index\";\n\nconst FilterOfNodes = props => {\n  const { nodes, checks, onInputChange } = props;\n  const { connectedNodes, notConnectedNodes } = getConnectedAndNotConnectedNode(\n    nodes\n  );\n  return (\n    <React.Fragment>\n      <Card body>\n        <CardTitle>\n          Connected <Badge color=\"secondary\">{connectedNodes.length}</Badge>\n        </CardTitle>\n        {connectedNodes.map(node => (\n          <CustomInput\n            key={node.general.name}\n            type=\"checkbox\"\n            name={node.general.name}\n            id={node.general.name}\n            label={node.general.name}\n            onChange={onInputChange}\n            checked={checks.indexOf(node.general.name) >= 0}\n            inline\n          />\n        ))}\n      </Card>\n      <Card body>\n        <CardTitle>\n          Not-Connected{\" \"}\n          <Badge color=\"secondary\">{notConnectedNodes.length}</Badge>\n        </CardTitle>\n        {notConnectedNodes.map(node => (\n          <CustomInput\n            key={node.general.name}\n            type=\"checkbox\"\n            name={node.general.name}\n            id={node.general.name}\n            label={node.general.name}\n            onChange={onInputChange}\n            disabled\n          />\n        ))}\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default FilterOfNodes;\n","import React, { Component } from \"react\";\nimport { Row, Col, Container } from \"reactstrap\";\n\nimport Processes from \"common/helpers/Processes\";\nimport FilterOfNodes from \"scenes/nodes/components/FilterOfNodes\";\n\nclass NodesPage extends Component {\n  state = {\n    checks: []\n  };\n\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    if (value) {\n      this.setState(prevState => ({\n        checks: prevState.checks.concat([name])\n      }));\n    } else {\n      this.setState(prevState => ({\n        checks: prevState.checks.filter(element => element !== name)\n      }));\n    }\n  };\n\n  componentDidMount() {\n    this.props.refreshNodes();\n  }\n\n  render() {\n    const { checks } = this.state;\n    const { nodes, refreshNodes } = this.props;\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col sm={{ size: \"auto\" }}>\n            <FilterOfNodes\n              nodes={this.props.nodes}\n              checks={checks}\n              onInputChange={this.handleInputChange}\n            />\n          </Col>\n          <Col>\n            {nodes\n              .filter(node => checks.indexOf(node.general.name) >= 0)\n              .map(node => (\n                <Processes\n                  key={node.general.name}\n                  node={node}\n                  refresh={refreshNodes}\n                />\n              ))}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default NodesPage;\n","import React from \"react\";\nimport { Card, CardTitle, Badge, CustomInput } from \"reactstrap\";\n\nconst FilterOfGroups = props => {\n  const { groups, checks, onInputChange } = props;\n  return (\n    <React.Fragment>\n      {groups.length > 0 &&\n        groups.map(group => (\n          <Card body key={group.name}>\n            <CardTitle>\n              <CustomInput\n                type=\"checkbox\"\n                name={group.name}\n                id={group.name}\n                label={group.name}\n                onChange={onInputChange}\n                checked={checks.indexOf(group.name) >= 0}\n                inline\n              />\n              <Badge color=\"secondary\">{group.environments.length}</Badge>\n            </CardTitle>\n\n            {group.environments.map(environment => (\n              <Card body key={environment.name}>\n                <CardTitle>\n                  {environment.name}{\" \"}\n                  <Badge color=\"secondary\">{environment.members.length}</Badge>\n                </CardTitle>\n                {environment.members.map(member => (\n                  <p key={member}>{member}</p>\n                ))}\n              </Card>\n            ))}\n          </Card>\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default FilterOfGroups;\n","import React, { Component } from \"react\";\nimport { Card, CardTitle, Row, Col, Container, Badge } from \"reactstrap\";\n\nimport Processes from \"common/helpers/Processes\";\nimport FilterOfGroups from \"scenes/groups/components/FilterOfGroups\";\n\nclass GroupsPage extends Component {\n  state = {\n    checks: []\n  };\n  handleInputChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    if (value) {\n      this.setState(prevState => ({\n        checks: prevState.checks.concat([name])\n      }));\n    } else {\n      this.setState(prevState => ({\n        checks: prevState.checks.filter(element => element !== name)\n      }));\n    }\n  };\n\n  componentWillMount() {\n    this.props.refreshGroups();\n  }\n\n  render() {\n    const { checks } = this.state;\n    const { groups, nodes, refreshNodes } = this.props;\n    const filterFunc = process => {\n      return checks.includes(process.group);\n    };\n    return (\n      <Container fluid>\n        <Row>\n          <Col sm={{ size: \"auto\" }}>\n            <Card body>\n              <CardTitle>\n                {\"Groups \"} <Badge color=\"secondary\">{groups.length}</Badge>\n              </CardTitle>\n              <FilterOfGroups\n                groups={groups}\n                checks={checks}\n                onInputChange={this.handleInputChange}\n              />\n            </Card>\n          </Col>\n          <Col>\n            {checks.length > 0 &&\n              nodes.map(node => (\n                <Processes\n                  key={node.general.name}\n                  node={node}\n                  filterFunc={filterFunc}\n                  refresh={refreshNodes}\n                />\n              ))}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default GroupsPage;\n","import React from \"react\";\nimport { UncontrolledAlert } from \"reactstrap\";\n\nconst FormMessage = props => {\n  const { message, status } = props;\n  return (\n    <React.Fragment>\n      {status && (\n        <UncontrolledAlert color={status}>{message}</UncontrolledAlert>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default FormMessage;\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\nimport api from \"services/api\";\nimport FormMessage from \"common/helpers/FormMessage\";\n\nclass AddNewUserModal extends Component {\n  state = {\n    modal: false,\n    username: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    usertype: \"0\",\n    formMessage: \"\",\n    formStatus: \"\"\n  };\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  submitForm = e => {\n    e.preventDefault();\n    const { username, password, confirmPassword, usertype } = this.state;\n    if (password !== confirmPassword) {\n      this.setState({\n        formStatus: \"danger\",\n        formMessage: \"Password and Confirm Password didn't match\"\n      });\n      return;\n    }\n    api.users\n      .add(username, password, usertype)\n      .then(json => {\n        this.setState({\n          formStatus: \"success\",\n          formMessage: `'${username}' successfully added`\n        });\n        setTimeout(() => {\n          this.toggle();\n          this.props.refreshUsers();\n        }, 1000);\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({\n          formStatus: \"danger\",\n          formMessage: error.message\n        });\n      });\n  };\n  render() {\n    const {\n      username,\n      password,\n      confirmPassword,\n      formMessage,\n      formStatus\n    } = this.state;\n    return (\n      <div>\n        <Button outline color=\"success\" onClick={this.toggle}>\n          Add New User\n        </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>New User</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.submitForm}>\n              <FormMessage message={formMessage} status={formStatus} />\n              <FormGroup>\n                <Label>Username</Label>\n                <Input\n                  type=\"username\"\n                  name=\"username\"\n                  id=\"exampleUsername\"\n                  placeholder=\"myusername\"\n                  value={username}\n                  onChange={this.handleInputChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"password\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  placeholder=\"********\"\n                  value={password}\n                  onChange={this.handleInputChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"confirmPassword\">Confirm Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  id=\"confirmPassword\"\n                  placeholder=\"********\"\n                  value={confirmPassword}\n                  onChange={this.handleInputChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"usertype\">Usertype</Label>\n                <Input\n                  type=\"select\"\n                  name=\"usertype\"\n                  id=\"usertype\"\n                  onChange={this.handleInputChange}\n                >\n                  <option value=\"0\">Admin</option>\n                  <option value=\"1\">Normal User</option>\n                </Input>\n              </FormGroup>\n              <Button color=\"success\">Add</Button>{\" \"}\n              <Button color=\"secondary\" onClick={this.toggle}>\n                Cancel\n              </Button>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default AddNewUserModal;\n","import React, { Component } from \"react\";\nimport { Row, Col, Table, Container, Button } from \"reactstrap\";\n\nimport AddNewUserModal from \"scenes/users/components/AddNewUserModal\";\n\nclass UsersPage extends Component {\n  componentDidMount() {\n    this.props.refreshUsers();\n  }\n  render() {\n    const UserTypes = [\"Admin\", \"Normal User\"];\n    const { users, refreshUsers, removeUser } = this.props;\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h2>Users</h2>\n          </Col>\n          <Col>\n            <AddNewUserModal refreshUsers={refreshUsers} />\n          </Col>\n        </Row>\n        <Row>\n          <Table hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Username</th>\n                <th>Usertype</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {users.map((u, index) => (\n                <tr key={u.name}>\n                  <th scope=\"row\">{index}</th>\n                  <td>{u.name}</td>\n                  <td>{UserTypes[u.type]}</td>\n                  <td>\n                    <Button\n                      color=\"danger\"\n                      disabled={u.name === \"admin\"}\n                      onClick={() => removeUser(u.name)}\n                    >\n                      Remove\n                    </Button>{\" \"}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default UsersPage;\n","import React from \"react\";\n\nconst ErrorPage = () => {\n  return (\n    <div>\n      <p>Error: Path does not exists!!!</p>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React, { Component } from \"react\";\nimport {\n  Container,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  Row\n} from \"reactstrap\";\nimport FormMessage from \"common/helpers/FormMessage\";\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      formMessage: \"\",\n      formStatus: \"\"\n    };\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  submitForm = e => {\n    e.preventDefault();\n    const { username, password } = this.state;\n    this.props\n      .onLogIn(username, password)\n      .then(() =>\n        this.setState({\n          formStatus: \"success\",\n          formMessage: \"Successfully logged in.\"\n        })\n      )\n      .catch(error =>\n        this.setState({\n          formStatus: \"danger\",\n          formMessage: \"Invalid username or password\"\n        })\n      );\n  };\n\n  render() {\n    const { username, password, formMessage, formStatus } = this.state;\n    return (\n      <Container className=\"App\">\n        <Row>\n          <Col>\n            <h2>Cesi Log In</h2>\n            <Form className=\"form-signin\" onSubmit={this.submitForm}>\n              <FormMessage message={formMessage} status={formStatus} />\n              <FormGroup>\n                <Label>Username</Label>\n                <Input\n                  type=\"username\"\n                  name=\"username\"\n                  id=\"exampleUsername\"\n                  placeholder=\"myusername\"\n                  value={username}\n                  onChange={this.handleChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"examplePassword\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"examplePassword\"\n                  placeholder=\"********\"\n                  value={password}\n                  onChange={this.handleChange}\n                />\n              </FormGroup>\n              <Button block color=\"primary\" size=\"lg\">\n                Submit\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default LoginPage;\n","import React from \"react\";\n\nconst AboutPage = () => {\n  return (\n    <div>\n      <h1>CeSI</h1>\n      <p>Cesi provides a web interface that manages many supervisors.</p>\n      <p>We use these technologies:</p>\n      <ul>\n        <li>Python3 (+3.4)</li>\n        <li>Flask (+1.0)</li>\n        <li>ReactJs (+16.0)</li>\n      </ul>\n      <a href=\"https://github.com/gamegos/cesi\">\n        Source Code and Documentation\n      </a>\n    </div>\n  );\n};\n\nexport default AboutPage;\n","import React from \"react\";\n\nimport {\n  Container,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  Row\n} from \"reactstrap\";\nimport { withRouter } from \"react-router-dom\";\n\nimport FormMessage from \"common/helpers/FormMessage\";\nimport api from \"services/api\";\n\nclass ChangePassword extends React.Component {\n  state = {\n    oldPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n    formMessage: \"\",\n    formStatus: \"\"\n  };\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleChangePassword = e => {\n    e.preventDefault();\n    const { oldPassword, newPassword, confirmPassword } = this.state;\n    if (!oldPassword) {\n      this.setState({\n        formStatus: \"danger\",\n        formMessage: \"Please enter valid value old password\"\n      });\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      this.setState({\n        formStatus: \"danger\",\n        formMessage: \"New Password and Confirm Password didn't match\"\n      });\n      return;\n    }\n    api.profile\n      .changePassword(oldPassword, newPassword)\n      .then(json => {\n        this.setState({\n          formStatus: \"success\",\n          formMessage: \"Success! Your Password has been changed!\"\n        });\n        setTimeout(() => {\n          // Redirect home page\n          this.props.history.push(\"/\");\n        }, 1000);\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({\n          formStatus: \"danger\",\n          formMessage: error.message\n        });\n      });\n  };\n  render() {\n    const {\n      oldPassword,\n      newPassword,\n      confirmPassword,\n      formMessage,\n      formStatus\n    } = this.state;\n    return (\n      <Container className=\"App\">\n        <Row>\n          <Col>\n            <h2>Change Password</h2>\n            <Form onSubmit={this.handleChangePassword}>\n              <FormMessage message={formMessage} status={formStatus} />\n              <FormGroup>\n                <Label>Old Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"oldPassword\"\n                  placeholder=\"******\"\n                  value={oldPassword}\n                  onChange={this.handleInputChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label>New Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"newPassword\"\n                  placeholder=\"******\"\n                  value={newPassword}\n                  onChange={this.handleInputChange}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label>Confirm Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"confirmPassword\"\n                  placeholder=\"******\"\n                  value={confirmPassword}\n                  onChange={this.handleInputChange}\n                />\n              </FormGroup>\n              <Button color=\"primary\">Change</Button>{\" \"}\n              <Button color=\"secondary\" onClick={this.toggle}>\n                Cancel\n              </Button>\n            </Form>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default withRouter(ChangePassword);\n","import React, { Component } from \"react\";\nimport { NavLink as RRNavLink } from \"react-router-dom\";\nimport {\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n  Badge,\n  Collapse,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nclass HeaderSettings extends Component {\n  state = { isOpen: false };\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavbarToggler onClick={this.toggle} />\n        <Collapse isOpen={this.state.isOpen} navbar>\n          <Nav className=\"ml-auto\" navbar>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Settings\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem tag=\"div\">\n                  <NavLink to=\"/about\" tag={RRNavLink}>\n                    <strong>About</strong>\n                  </NavLink>\n                </DropdownItem>\n                <DropdownItem tag=\"div\">\n                  <NavLink to=\"/profile/change_password\" tag={RRNavLink}>\n                    <strong>Change Password</strong>\n                  </NavLink>\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem onClick={this.props.onLogOut}>\n                  Logout\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n        </Collapse>\n      </React.Fragment>\n    );\n  }\n}\n\n/**\n * https://stackoverflow.com/questions/42372179/reactstrap-and-react-router-4-0-0-beta-6-active-navlink\n *\n */\nconst Header = ({ onLogOut, isAdmin, version }) => {\n  return (\n    <Navbar color=\"light\" light expand=\"md\">\n      <NavbarBrand exact to=\"/about\" tag={RRNavLink}>\n        Cesi <Badge color=\"success\">{version}</Badge>\n      </NavbarBrand>\n      <Nav pills>\n        <NavItem>\n          <NavLink exact replace to=\"/dashboard\" tag={RRNavLink}>\n            Dashboard\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink exact replace to=\"/nodes\" tag={RRNavLink}>\n            Nodes\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink exact replace to=\"/environments\" tag={RRNavLink}>\n            Environments\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink exact replace to=\"/groups\" tag={RRNavLink}>\n            Groups\n          </NavLink>\n        </NavItem>\n        {isAdmin && (\n          <NavItem>\n            <NavLink exact replace to=\"/users\" tag={RRNavLink}>\n              Users\n            </NavLink>\n          </NavItem>\n        )}\n      </Nav>\n      <HeaderSettings onLogOut={onLogOut} />\n    </Navbar>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport api from \"services/api\";\nimport {\n  LoginPage,\n  DashboardPage,\n  ErrorPage,\n  GroupsPage,\n  NodesPage,\n  EnvironmentsPage,\n  UsersPage,\n  AboutPage,\n  ChangePasswordPage\n} from \"scenes/index\";\n\nimport Header from \"common/views/Header\";\n\nclass App extends Component {\n  state = {\n    profile: null,\n    version: \"0\",\n    logs: [],\n    nodes: [],\n    environments: [],\n    users: [],\n    groups: []\n  };\n\n  handleRefreshActivityLogs = async () => {\n    const logs = await api.activitylogs.get();\n    this.setState({ logs });\n  };\n\n  handleClearActivityLogs = async () => {\n    await api.activitylogs.clear();\n    this.setState({ logs: [] });\n  };\n\n  handleRefreshGroups = async () => {\n    const groups = await api.groups.get();\n    this.setState({ groups });\n  };\n\n  handleRefreshNodes = async () => {\n    const nodes = await api.nodes.get();\n    this.setState({ nodes });\n  };\n\n  handleRefreshEnvironments = async () => {\n    const environments = await api.environments.get();\n    this.setState({ environments });\n  };\n\n  handleRefreshDashboardSummary = async () => {\n    await this.handleRefreshEnvironments();\n    await this.handleRefreshNodes();\n  };\n\n  handleRefreshUsers = async () => {\n    const users = await api.users.get();\n    this.setState({ users });\n  };\n\n  handleRemoveUser = username => {\n    api.users\n      .remove(username)\n      .then(() => this.handleRefreshUsers())\n      .catch(error => console.log(error));\n  };\n\n  handleRefreshProfile = async () => {\n    const profile = await api.profile.get();\n    this.setState({ profile });\n  };\n\n  handleLogIn = (username, password) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await api.auth.logIn(username, password);\n        resolve(\"okey\");\n        this.handleRefreshProfile();\n      } catch (error) {\n        console.log(error);\n        reject(error);\n      }\n    });\n  };\n\n  handleLogOut = () => {\n    api.auth\n      .logOut()\n      .then(() => {\n        this.handleRefreshProfile();\n      })\n      .catch(error => console.log(error));\n  };\n\n  getApiVersion = async () => {\n    const version = await api.version.get();\n    this.setState({ version });\n  };\n\n  componentDidMount() {\n    this.handleRefreshProfile();\n    this.getApiVersion();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.profile ? (\n          <HashRouter>\n            <React.Fragment>\n              <Header\n                isAdmin={this.state.profile.type === 0}\n                onLogOut={this.handleLogOut}\n                version={this.state.version}\n              />\n              <Switch>\n                <Redirect exact from=\"/\" to=\"/dashboard\" />\n                <Route\n                  path=\"/dashboard\"\n                  exact\n                  render={props => (\n                    <DashboardPage\n                      {...props}\n                      logs={this.state.logs}\n                      environments={this.state.environments}\n                      nodes={this.state.nodes}\n                      clearActivityLogs={this.handleClearActivityLogs}\n                      refreshActivityLogs={this.handleRefreshActivityLogs}\n                      refreshDashboardSummary={\n                        this.handleRefreshDashboardSummary\n                      }\n                    />\n                  )}\n                />\n                <Route\n                  path=\"/nodes\"\n                  exact\n                  render={props => (\n                    <NodesPage\n                      {...props}\n                      nodes={this.state.nodes}\n                      refreshNodes={this.handleRefreshNodes}\n                    />\n                  )}\n                />\n                <Route\n                  path=\"/environments\"\n                  exact\n                  render={props => (\n                    <EnvironmentsPage\n                      {...props}\n                      environments={this.state.environments}\n                      refreshEnvironments={this.handleRefreshEnvironments}\n                    />\n                  )}\n                />\n                <Route\n                  path=\"/groups\"\n                  exact\n                  render={props => (\n                    <GroupsPage\n                      {...props}\n                      groups={this.state.groups}\n                      refreshGroups={this.handleRefreshGroups}\n                      nodes={this.state.nodes}\n                      refreshNodes={this.handleRefreshNodes}\n                    />\n                  )}\n                />\n                <Route\n                  path=\"/users\"\n                  exact\n                  render={props => (\n                    <UsersPage\n                      {...props}\n                      users={this.state.users}\n                      refreshUsers={this.handleRefreshUsers}\n                      removeUser={this.handleRemoveUser}\n                    />\n                  )}\n                />\n                <Route path=\"/about\" exact component={AboutPage} />\n                <Route\n                  path=\"/profile/change_password\"\n                  exact\n                  component={ChangePasswordPage}\n                />\n                <Route component={ErrorPage} />\n              </Switch>\n            </React.Fragment>\n          </HashRouter>\n        ) : (\n          <LoginPage onLogIn={this.handleLogIn} />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}